-- A CONTINUACION SE CREA EL USUARIO DE ADMIN PARA EL PROYECTO AMAROK --
-- ANTES DE CREAR LA BASE DE DATOS, DEBEMOS CORRER LA SIGUIENTE SENTENCIA SQL. IMPORTANTE HACERLO POR SEPARADO!!, DE LO CONTRARIO
   SALDRÁ ERROR PORQUE NO SE PUEDE EJECUTAR AMBAS SENTENCIAS EN UN MISMO BLOQUE DE TRANSACCIÓN --

CREATE USER yespinosa WITH PASSWORD 'Yeison01*';

-- LUEGO DE EJECUTAR LO ANTERIOR, PROCEDEMOS A CREAR LA BASE DE DATOS ASIGNADA AL OWNER "USUARIO PREVIAMENTE CREADO" --

CREATE DATABASE db_amarok WITH OWNER yespinosa;

-- UNA VEZ CREADA LA BASE DE DATOS, PROCEDEMOS A INGRESAR EN EL QUERY TOOL DE LA MÍSMA. Y EJECUTAMOS TODO LO SIGUIENTE --

ALTER USER yespinosa WITH SUPERUSER;
ALTER USER yespinosa WITH CREATEDB;
ALTER USER yespinosa WITH CREATEROLE;

--DDL

-- A CONTINUACION SE REALIZA EL DDL DE LAS TABLAS PARA EL PROYECTO AMAROK --
-- 
DROP TABLE IF EXISTS detallepedido;
DROP TABLE IF EXISTS pedidoproveedor;
DROP TABLE IF EXISTS envionacional;
DROP TABLE IF EXISTS empresatransporte;
DROP TABLE IF EXISTS enviolocal;
DROP TABLE IF EXISTS redencionpuntos;
DROP TABLE IF EXISTS detalleventa;
DROP TABLE IF EXISTS venta;
DROP TABLE IF EXISTS mensajero;
DROP TABLE IF EXISTS cliente;
DROP TABLE IF EXISTS producto;
DROP TABLE IF EXISTS proveedor;
DROP TABLE IF EXISTS tipopago;
DROP TABLE IF EXISTS parametros;
DROP TABLE IF EXISTS ciudad;
DROP TABLE IF EXISTS departamento;

-- TABLA DE PARAMETROS
CREATE TABLE parametros
(
    empreNit          VARCHAR NOT NULL,                                 -- NIT DE LA EMPRESA AMAROK
    empreNom          VARCHAR NOT NULL,                                 -- NOMBRE DE LA EMPRESA AMAROK
    numFacIni         DECIMAL(5,0) NOT NULL,                            -- NÚMERO INICIAL DE LA FACTURA
    redPunDes         DECIMAL(4,0) NOT NULL,                            -- PUNTAJE MÍNIMO NECESARIO PARA REDIMIR UN DESCUENTO DEL 30%
    redPunDom         DECIMAL(4,0) NOT NULL,                            -- PUNTAJE MÍNIMO NECESARIO PARA REDIMIR UN DOMICILIO GRATIS
    adminCon          VARCHAR DEFAULT NULL,                             -- CONTRASEÑA DEL ADMIN
    usr_insert        VARCHAR NOT NULL,                                 -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert        TIMESTAMP WITHOUT TIME ZONE NOT NULL,             -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update        VARCHAR,                                          -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update        TIMESTAMP WITHOUT TIME ZONE,                      -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY(empreNit)
);

-- TABLA DE DEPARTAMENTOS
CREATE TABLE departamento
(
    departId        DECIMAL(2,0) NOT NULL,                              -- NÚMERO IDENTIFICADOR DEL DEPARTAMENTO
    departNom       VARCHAR NOT NULL,                                   -- NOMBRE DEL DEPARTAMENTO
    usr_insert      VARCHAR NOT NULL,                                   -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert      TIMESTAMP WITHOUT TIME ZONE NOT NULL,               -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update      VARCHAR,                                            -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update      TIMESTAMP WITHOUT TIME ZONE,                        -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (departId)
);

-- TABLA DE CIUDADES
CREATE TABLE ciudad
(
    ciudadId           DECIMAL(5,0) NOT NULL,                           -- NÚMERO IDENTIFICADOR DE LA CIUDAD
    idDepart           DECIMAL(2,0) NOT NULL,                           -- FORÁNEA DEPARTAMENTO
    ciudadNom          VARCHAR NOT NULL,                                -- NOMBRE DE LA CIUDAD, SOLO SE PUEDE INCLUIR FLORIDABLANCA, GIRÓN, NORTE Y PIEDECUESTA COMO CIUDADES
    precioDom          DECIMAL(5,0) DEFAULT 0,                          -- PRECIO QUE TENDRÁ EL DOMICILIO EN BUCARAMANGA O SU ÁREA METROPOLITANA
    usr_insert         VARCHAR NOT NULL,                                -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP WITHOUT TIME ZONE NOT NULL,            -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR,                                         -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP WITHOUT TIME ZONE,                     -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (ciudadId),
    FOREIGN KEY (idDepart) REFERENCES departamento(departId)
);

-- TABLA DE LOS TIPOS DE PAGO EN LA EMRPESA
CREATE TABLE tipopago
(
    tipPagId        DECIMAL(1,0) NOT NULL,                              -- NÚMERO IDENTIFICADOR DEL TIPO DE PAGO
    tipPagNom       VARCHAR NOT NULL,                                   -- NOMBRE DEL TIPO DE PAGO
    usr_insert      VARCHAR NOT NULL,                                   -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert      TIMESTAMP WITHOUT TIME ZONE NOT NULL,               -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    PRIMARY KEY (tipPagId)
);


-- TABLA DE PROVEEDORES
CREATE TABLE proveedor
(
    proveeNit       VARCHAR NOT NULL,                                   -- NIT DEL PROVEEDOR
    idCiudad        DECIMAL(5,0) NOT NULL,                              -- FORÁNEA CÓDIGO CIUDAD 
    proveeNom       VARCHAR NOT NULL,                                   -- NOMBRE DEL PROVEEDOR
    proveeDir       VARCHAR NOT NULL,                                   -- DIRECCIÓN DEL PROVEEDOR
    proveeTel       VARCHAR NOT NULL,                                   -- TELÉFONO DEL PROVEEDOR
    proveeEma       VARCHAR NOT NULL,                                   -- CORREO/EMAIL DEL PROVEEDOR
    usr_insert      VARCHAR NOT NULL,                                   -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert      TIMESTAMP WITHOUT TIME ZONE NOT NULL,               -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update      VARCHAR,                                            -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update      TIMESTAMP WITHOUT TIME ZONE,                        -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (proveeNit),
    FOREIGN KEY (idCiudad) REFERENCES ciudad(ciudadId)
);

-- TABLA DE PRODUCTOS
CREATE TABLE producto
(
    producCod          VARCHAR NOT NULL,                                -- CÓDIGO IDENTIFICADOR DEL PRODUCTO
    producNom          VARCHAR NOT NULL,                                -- NOMBRE DEL PRODUCTO
    producSto          DECIMAL(3,0) NOT NULL CHECK(producSto>=0),       -- NUMERO DE PRODUCTOS EN INVENTARIO / STOCK
    producPre          DECIMAL(7,0) NOT NULL CHECK(producPre>0),        -- VALOR UNITARIO PARA VENTA DEL PRODUCTO
    producDis          BOOLEAN NOT NULL DEFAULT TRUE,                   -- ESTADO DE DISPONIBILIDAD DEL PRODUCTO
    producAct          BOOLEAN NOT NULL DEFAULT TRUE,                   -- INDICADOR DE PRODUCTO ACTIVO TRUE O NO ACTIVO FALSE
    usr_insert         VARCHAR NOT NULL,                                -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP WITHOUT TIME ZONE NOT NULL,            -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR,                                         -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP WITHOUT TIME ZONE,                     -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (producCod)
);

-- TABLA DE CLIENTES
CREATE TABLE cliente
(
    clientDoc          VARCHAR NOT NULL,                                -- DOCUMENTO IDENTIFICADOR DEL CLIENTE. TAMBIÉN ES SU USUARIO PARA LOGEARSE
    idCiudad           DECIMAL(5,0) NOT NULL,                           -- FORÁNEA CIUDAD
    clientRol         VARCHAR NOT NULL,                                -- ROL DEL CLIENTE EN EL SISTEMA
    clientNom          VARCHAR NOT NULL,                                -- NOMBRE DEL CLIENTE
    clientDir          VARCHAR NOT NULL,                                -- DIRECCIÓN DEL CLIENTE
    clientTel          VARCHAR NOT NULL,                                -- TELÉFONO DEL CLIENTE
    clientEma          VARCHAR NOT NULL,                                -- EMAIL/ CORREO DEL CLIENTE
    clientCon          VARCHAR NOT NULL,                                -- CONTRASEÑA DEL CLIENTE PARA LOGEARSE
    clientDirDos       VARCHAR DEFAULT NULL,                            -- DIRECCIÓN ALTERNATIVA 1 DE ENVÍO DEL CLIENTE
    clientDirtres      VARCHAR DEFAULT NULL,                            -- DIRECCIÓN ALTERNATIVA 2 DE ENVÍO DEL CLIENTE
    clientTelDos       VARCHAR DEFAULT NULL,                            -- TELÉFONO ALTERNATIVO DE ENVÍO DEL CLIENTE
    clientTelTres      VARCHAR DEFAULT NULL,                            -- TELÉFONO ALTERNATIVO DE ENVÍO DEL CLIENTE
    clientPun          DECIMAL(5,0) NOT NULL DEFAULT 0,                 -- PUNTOS POR COMPRAS. POR CADA 1000 PESOS SE LE DARÁ 1 PUNTO AL CLIENTE
    clientAct          BOOLEAN NOT NULL DEFAULT TRUE,                   -- INDICADOR DE CLIENTE ACTIVO TRUE O NO ACTIVO FALSE
    usr_insert         VARCHAR NOT NULL,                                -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP WITHOUT TIME ZONE NOT NULL,            -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR,                                         -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP WITHOUT TIME ZONE,                     -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (clientDoc),
    FOREIGN KEY (idCiudad) REFERENCES ciudad(ciudadId)
);

-- TABLA DE MENSAJEROS
CREATE TABLE mensajero
(
    mensajDoc          VARCHAR NOT NULL,                               -- DOCUMENTO IDENTIFICADOR DEL MENSAJERO. TAMBIÉN ES SU USUARIO PARA LOGEARSE
    mensajRol          VARCHAR NOT NULL,                               -- ROL DEL MENSAJERO EN EL SISTEMA
    mensajNom          VARCHAR NOT NULL,                               -- NOMBRE DEL MENSAJERO
    mensajDir          VARCHAR NOT NULL,                               -- DIRECCIÓN DEL MENSAJERO
    mensajTel          VARCHAR NOT NULL,                               -- TELÉFONO DEL MENSAJERO
    mensajEma          VARCHAR NOT NULL,                               -- EMAIL/ CORREO DEL MENSAJERO
    mensajCon          VARCHAR NOT NULL,                               -- CONTRASEÑA DEL MENSAJERO PARA LOGEARSE
    mensajDis          BOOLEAN NOT NULL DEFAULT TRUE,                  -- DISPONIBILIDAD DEL MENSAJERO.
    mensajAct          BOOLEAN NOT NULL DEFAULT TRUE,                  -- INDICADOR DE MENSAJERO ACTIVO TRUE O NO ACTIVO FALSE
    usr_insert         VARCHAR NOT NULL,                               -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP WITHOUT TIME ZONE NOT NULL,           -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update         VARCHAR,                                        -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update         TIMESTAMP WITHOUT TIME ZONE,                    -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (mensajDoc)
);


-- TABLA PARA LA VENTA
CREATE TABLE venta
(
    ventaNum        DECIMAL(5,0) NOT NULL,                             -- NÚMERO IDENTIFICADOR DE LA VENTA
    docClient       VARCHAR NOT NULL,                                  -- FORÁNEA DOCUMENTO CLIENTE
    idCiudad        DECIMAL(5,0) NOT NULL,                             -- FORÁNEA DE LA CIUDAD DEL CLIENTE
    idTipPag        DECIMAL(1,0) NOT NULL,                             -- FORÁNEA MODO DE PAGO
    ventaRutFac     VARCHAR DEFAULT NULL,                              -- RUTA DEL DESTINO DE LA FACTURA
    ventaRec        BOOLEAN NOT NULL DEFAULT FALSE,                    -- EL VALOR DE LA VENTA FUE RECAUDADO O NO
	ventaPlaRec     TIMESTAMP NOT NULL DEFAULT NOW(),                  -- PLAZO PARA RECAUDAR EL VALOR DE LA VENTA
    ventaRutRec     VARCHAR DEFAULT NULL,                              -- RUTA DEL DESTINO DE LA FACTURA
    ventaDom        BOOLEAN NOT NULL DEFAULT FALSE,                    -- CLIENTE REQUIERE DOMICILIO O NO
    usr_insert      VARCHAR NOT NULL,                                  -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert      TIMESTAMP WITHOUT TIME ZONE NOT NULL,              -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    PRIMARY KEY (ventaNum),
    FOREIGN KEY (docClient) REFERENCES cliente(clientDoc),
    FOREIGN KEY (idCiudad) REFERENCES ciudad(ciudadId),
    FOREIGN KEY (idTipPag) REFERENCES tipopago(tipPagId)
);

-- TABLA PARA EL DETALLL DE LA VENTA
CREATE TABLE detalleventa
(
    numVenta            DECIMAL(5,0) NOT NULL,                         -- FORÁNEA NÚMERO VENTA
    codProduc           VARCHAR NOT NULL,                              -- FORÁNEA CODIGO PRODUCTO
    detVentaCan         DECIMAL(3,0) NOT NULL,                         -- CANTIDAD DE PRODUCTO DEL DETALLE DE LA VENTA
    detVentaDes         DECIMAL(6,0) NOT NULL,                         -- DESCUENTO APLICADO AL PRODUCTO
    detVentaValPar      DECIMAL(8,0) NOT NULL,                         -- VALOR PARCIAL MONETARIO DEL DETALLE DE LA VENTA
    usr_insert          VARCHAR NOT NULL,                              -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert          TIMESTAMP WITHOUT TIME ZONE NOT NULL,          -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    PRIMARY KEY (numVenta, codProduc),
    FOREIGN KEY (numVenta) REFERENCES venta(ventaNum),
    FOREIGN KEY (codProduc) REFERENCES producto(producCod)
);

-- TABLA DE REDENCIÓN DE PUNTOS DEL CLIENTE
CREATE TABLE redencionpuntos
(
    redencNum          DECIMAL(2,0) NOT NULL,                          -- NÚMERO IDENTIFICADOR DE LA REDENCIÓN DE PUNTOS DEL CLIENTE
    numVenta           DECIMAL(5,0) NOT NULL,                          -- FORÁNEA CLIENTE
    redencPunRed       DECIMAL(2,0) NOT NULL,                          -- CANTIDAD DE PUNTOS REDIMIDOS POR EL CLIENTE
    redencDes          BOOLEAN NOT NULL,                               -- INDICADOR DE REDENCIÓN DESCUENTO TRUE Y SI NO ES DOMICILIO FALSE
    usr_insert         VARCHAR NOT NULL,                               -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert         TIMESTAMP WITHOUT TIME ZONE NOT NULL,           -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    PRIMARY KEY (redencNum),
    FOREIGN KEY (numVenta) REFERENCES venta(ventaNum)
);

-- TABLA DE ENVÍO LOCAL
CREATE TABLE enviolocal
(
    envioLocNum         DECIMAL(4,0) NOT NULL,                          -- NÚMERO IDENTIFICADOR DEL ENVÍO LOCAL
    numVenta            DECIMAL(5,0) NOT NULL,                          -- FORÁNEA VENTA
    docMensaj           VARCHAR,                                        -- FORÁNEA MENSAJERO
    idCiudad            DECIMAL(5,0) NOT NULL,                          -- FORÁNEA MUNICIPIO DE DESTINO
    envioLocNomDes      VARCHAR NOT NULL,                               -- NOMBRE DEL DESTINARIO DEL ENVÍO
    envioLocDirDes      VARCHAR NOT NULL,                               -- DIRECCIÓN DE DESTINO DEL ENVÍO
    envioLocTelDes      VARCHAR NOT NULL,                               -- TELÉFONO DEL DESTINARIO DEL ENVÍO
    envioLocPre         DECIMAL(5,0) NOT NULL,                          -- PRECIO DEL ENVÍO
    envioLocObs         VARCHAR DEFAULT NULL,                           -- OBSERVACIONES DEL ENVÍO
    envioLocSal         BOOLEAN NOT NULL DEFAULT FALSE,                 -- INDICADOR DE SALIDA DEL ENVÍO. SALIÓ TRUE, NO SALIÓ FALSE
    envioLocEnt         BOOLEAN NOT NULL DEFAULT FALSE,                 -- INDICADOR DE ENTREGA DEL ENVÍO. ENTREGADO TRUE, NO ENTREGADO FALSE
    usr_insert          VARCHAR NOT NULL,                               -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert          TIMESTAMP WITHOUT TIME ZONE NOT NULL,           -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update          VARCHAR,                                        -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update          TIMESTAMP WITHOUT TIME ZONE,                    -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (envioLocNum),
    FOREIGN KEY (numVenta) REFERENCES venta(ventaNum),
    FOREIGN KEY (docMensaj) REFERENCES mensajero(mensajDoc),
    FOREIGN KEY (idCiudad) REFERENCES ciudad(ciudadId)
);

--TABLA PARA EMPRESA DE TRANSPORTE
CREATE TABLE empresatransporte
(
    empreTraNit         VARCHAR NOT NULL,                               -- NIT DE LA EMPRESA DE TRANSPORTE
    empreTraNom         VARCHAR NOT NULL,                               -- NOMBRE DE LA EMPRESA DE TRANSPORTE
    empreTraTel         VARCHAR NOT NULL,                               -- TELÉFONO DE LA EMPRESA DE TRANSPORTE
    usr_insert          VARCHAR NOT NULL,                               -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert          TIMESTAMP WITHOUT TIME ZONE NOT NULL,           -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update          VARCHAR,                                        -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update          TIMESTAMP WITHOUT TIME ZONE,                    -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO
    PRIMARY KEY (empreTraNit)
);

--TABLA DE ENVÍO NACIONAL
CREATE TABLE envionacional
(
    envioNacNum               DECIMAL(4,0) NOT NULL,                      -- NÚMERO IDENTIFICADOR DEL ENVÍO NACIONAL
    numVenta                  DECIMAL(5,0) NOT NULL,                      -- FORÁNEA VENTA
    docMensaj	              VARCHAR,                                    -- FORÁNEA MENSAJERO QUE PONDRÁ LA ENCOMIENDA
    idCiudad                  DECIMAL(5,0) NOT NULL,                      -- FORÁNEA MUNICIPIO DE DESTINO
    nitEmpreTra               VARCHAR NOT NULL,                           -- FORÁNEA EMPRESA TRANSPORTE
    envioNacNomDes            VARCHAR NOT NULL,                           -- NOMBRE DEL DESTINARIO DEL ENVÍO
    envioNacDirDes            VARCHAR NOT NULL,                           -- DIRECCIÓN DE DESTINO DEL ENVÍO
    envioNacTelDes            VARCHAR NOT NULL,                           -- TELÉFONO DEL DESTINARIO DEL ENVÍO
    envioNacPre               DECIMAL(5,0) NOT NULL,                      -- PRECIO DEL ENVÍO
    envioNacObs               VARCHAR DEFAULT NULL,                       -- OBSERVACIONES DEL ENVÍO
    envioNacSal               BOOLEAN NOT NULL DEFAULT FALSE,             -- INDICADOR DE SALIDA DEL ENVÍO. SALIÓ TRUE, NO SALIÓ FALSE
    envioNacRec               BOOLEAN NOT NULL DEFAULT FALSE,             -- INDICADOR DE RECIBIDO DEL ENVÍO. RECIBIDO TRUE, NO RECIBIDO FALSE
    envioNacRut               VARCHAR DEFAULT NULL,                       -- RUTA DE ACCESO A GUÍA DE ENVÍO NACIONAL
    usr_insert                VARCHAR NOT NULL,                           -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert                TIMESTAMP WITHOUT TIME ZONE NOT NULL,       -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    usr_update                VARCHAR,                                    -- USUARIO QUIEN ACTUALIZÓ EL REGISTRO
    fec_update                TIMESTAMP WITHOUT TIME ZONE,                -- FECHA EN LA QUE SE ACTUALIZÓ EL REGISTRO 
    PRIMARY KEY (envioNacNum),
    FOREIGN KEY (numVenta) REFERENCES venta(ventaNum),
	FOREIGN KEY (docMensaj) REFERENCES mensajero(mensajDoc),
    FOREIGN KEY (idCiudad) REFERENCES ciudad(ciudadId),
    FOREIGN KEY (nitEmpreTra) REFERENCES empresatransporte(empreTraNit)
);

--TABLA DE PEDIDO A PROVEEDOR
CREATE TABLE pedidoproveedor
(
    pedidoNum               DECIMAL(5,0) NOT NULL,                         -- NÚMERO IDENTIFICADOR DEL PEDIDO AL PROVEEDOR
    nitProvee               VARCHAR NOT NULL,                              -- FORÁNEA PROVEEDOR
    idTipPag                DECIMAL(1,0) NOT NULL,                         -- FORÁNEA MODO DE PAGO
    pedidoDesEsp            DECIMAL(6,0) DEFAULT 0,                        -- DESCUENTO ESPECIAL DEL PROVEEDOR PARA TODO EL PEDIDO
    pedidoRutPag            VARCHAR DEFAULT NULL,                          -- RUTA DE ACCESO AL VOUCHER DE PAGO AL PROVEEDOR
    pedidoPag               BOOLEAN NOT NULL,                              -- EL PEDIDO FUE PAGADO AL PROVEEDOR TRUE, SI NO FALSE
	PagoPlazo               TIMESTAMP NOT NULL DEFAULT NOW(),              -- PLAZO PARA PAGAR EL VALOR DEL PEDID.
    usr_insert              VARCHAR NOT NULL,                              -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert              TIMESTAMP WITHOUT TIME ZONE NOT NULL,          -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    PRIMARY KEY (pedidoNum),
    FOREIGN KEY (nitProvee) REFERENCES proveedor(proveeNit),
    FOREIGN KEY (idTipPag) REFERENCES tipopago(tipPagId)
);

-- TABLA PARA EL DETALLE DEL PEDIDO
CREATE TABLE detallepedido
(
    numPedido               DECIMAL(5,0) NOT NULL,                          -- FORÁNEA NÚMERO PEDIDO
    codProduc               VARCHAR NOT NULL,                               -- FORÁNEA CODIGO PRODUCTO
    detPedCan               DECIMAL(3,0) NOT NULL,                          -- CANTIDAD DE PRODUCTO DEL DETALLE DEL PEDIDO
    detPedCos               DECIMAL(7,0) NOT NULL,                          -- COSTO UNITARIO DEL PRODUCTO
    detallePedDes           DECIMAL(6,0) NOT NULL,                          -- DESCUENTO POR CADA PRODUCTO
    detPedValPar            DECIMAL(8,0) NOT NULL,                          -- VALOR PARCIAL MONETARIO DEL DETALLE DEL PEDIDO
    usr_insert              VARCHAR NOT NULL,                               -- USUARIO QUIEN INSERTÓ EL REGISTRO
    fec_insert              TIMESTAMP WITHOUT TIME ZONE NOT NULL,           -- FECHA EN LA QUE SE INSERTÓ EL REGISTRO
    PRIMARY KEY (numPedido, codProduc),
    FOREIGN KEY (numPedido) REFERENCES pedidoproveedor(pedidoNum),
    FOREIGN KEY (codProduc) REFERENCES producto(producCod)
);


--Función para actualización de tablas

CREATE OR REPLACE FUNCTION fun_actualizacion_tabla() RETURNS TRIGGER AS 
$$
    BEGIN
        IF TG_OP = 'INSERT' THEN
        NEW.usr_insert = CURRENT_USER;
        NEW.fec_insert = NOW();
        END IF;
        IF TG_OP = 'UPDATE' THEN
            NEW.usr_update = CURRENT_USER;
            NEW.fec_update = NOW();
        END IF;
        RETURN NEW;
    END;
$$
LANGUAGE PLPGSQL;


--TRIGGERS

CREATE OR REPLACE TRIGGER tri_actualizacion_departamento BEFORE INSERT OR UPDATE ON departamento
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_ciudad BEFORE INSERT OR UPDATE ON ciudad
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_parametros BEFORE INSERT OR UPDATE ON parametros
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_tipopago BEFORE INSERT OR UPDATE ON tipopago
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_proveedor BEFORE INSERT OR UPDATE ON proveedor
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_producto BEFORE INSERT OR UPDATE ON producto
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_cliente BEFORE INSERT OR UPDATE ON cliente
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_mensajero BEFORE INSERT OR UPDATE ON mensajero
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_venta BEFORE INSERT OR UPDATE ON venta
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_detalleventa BEFORE INSERT OR UPDATE ON detalleventa
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_redencionpuntos BEFORE INSERT OR UPDATE ON redencionpuntos
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_enviolocal BEFORE INSERT OR UPDATE ON enviolocal
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_empresatransporte BEFORE INSERT OR UPDATE ON empresatransporte
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_envionacional BEFORE INSERT OR UPDATE ON envionacional
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_pedidoproveedor BEFORE INSERT OR UPDATE ON pedidoproveedor
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();

CREATE OR REPLACE TRIGGER tri_actualizacion_detallepedido BEFORE INSERT OR UPDATE ON detallepedido
FOR EACH ROW EXECUTE PROCEDURE fun_actualizacion_tabla();


--DML PRUEBA DE ARRANQUE

INSERT INTO parametros VALUES('123', 'LA CASA DE LA AMAROK', 0, 2000, 1000, MD5('admin123'));


INSERT INTO departamento VALUES(1, 'Santander');
INSERT INTO departamento VALUES(2, 'Antioquia');
INSERT INTO departamento VALUES(3, 'Norte de Santander');
INSERT INTO departamento VALUES(4, 'Cundinamarca');
INSERT INTO departamento VALUES(5, 'Huila');


INSERT INTO ciudad VALUES(1, 1, 'Bucaramanga', 6000);
INSERT INTO ciudad VALUES(2, 1, 'Floridablanca', 9000);
INSERT INTO ciudad VALUES(3, 1, 'Girón', 12000);
INSERT INTO ciudad VALUES(4, 1, 'Piedecuesta', 20000);
INSERT INTO ciudad VALUES(5, 1, 'Norte', 8000);
INSERT INTO ciudad VALUES(6, 2, 'Medellin');


INSERT INTO tipopago VALUES(1, 'Efectivo');
INSERT INTO tipopago VALUES(2, 'Tarjeta');
INSERT INTO tipopago VALUES(3, 'Transferencia');
INSERT INTO tipopago VALUES(4, 'PSE');
INSERT INTO tipopago VALUES(5, 'Nequi');

INSERT INTO proveedor VALUES('1357', 1, 'Soluciones Múltiples', 'Cra 14 #22-37', '3227695080', 'solucionesm@hotmail.com');
INSERT INTO proveedor VALUES('2468', 1, 'Multipartes y Repuestos', 'Cra 18 #61-15', '6978263', 'multipartesr@gmail.com');
INSERT INTO proveedor VALUES('3692', 1, 'VehiRepuestos', 'cra 16a #49-28', '6428061', 'vehirepuestos@hotmail.com');


insert into producto values('PP201', 'Pera Pomo Amarok', 60, 160000);
insert into producto values('BD301', 'Bomper Delantero Amarok', 40, 900000);
insert into producto values('MC401', 'Manguera Combustible Amarok', 50, 385000);


INSERT INTO cliente VALUES('1005324752', 1, 'cliente', 'Yeison Espinosa', 'Dirección Yeison', '3184790508', 'yeison@gmail.com', MD5('yeison123'));


INSERT INTO empresatransporte VALUES('12345', 'SotraMagdalena', '3155674673');
INSERT INTO empresatransporte VALUES('67890', 'CotraMagdalena', '3185614613');
INSERT INTO empresatransporte VALUES('45632', 'Copetrán', '3114678942');


INSERT INTO mensajero VALUES('1095823698', 2, 'Mensajero Uno', 'Direcciòn Uno', 'Teléfono Uno', 'uno@gmail.com', MD5('uno'));
INSERT INTO mensajero VALUES('1098521618', 2, 'Mensajero Dos', 'Direcciòn Dos', 'Teléfono Dos', 'dos@gmail.com', MD5('dos'));
INSERT INTO mensajero VALUES('1095813090', 2, 'Mensajero Tres', 'Direcciòn Tres', 'Teléfono Tres', 'tres@gmail.com', MD5('tres'));


INSERT INTO venta VALUES(1, '1005324752', 1, 1);

INSERT INTO detalleventa VALUES(1, 'PP201', 10, 0, 1600000);
INSERT INTO detalleventa VALUES(1, 'BD301', 5, 0, 4500000);
INSERT INTO detalleventa VALUES(1, 'MC401', 2, 0, 770000);


insert into pedidoproveedor values(1, '2468', 2, 0, '', 'true');

insert into detallepedido values(1, 'MC401', 2, 350000, 0, 700000);
insert into detallepedido values(1, 'PP201', 2, 120000, 0, 240000);
insert into detallepedido values(1, 'BD301', 1, 800000, 0, 900000);


--FUNCIONES DE INSERCIÓN, ACTUALIZACIÓN Y BORRADO

CREATE OR REPLACE FUNCTION fun_delete_cliente(wdoc_cliente cliente.clientdoc%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        UPDATE cliente SET clientAct=FALSE
        WHERE clientdoc = wdoc_cliente;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RAISE NOTICE 'NO SE PUDO ELIMINAR EL CLIENTE';
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_empresa(wnit_empresa empresatransporte.empreTraNit%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        DELETE FROM empresatransporte
        WHERE empreTraNit = wnit_empresa;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_mensajero(wdoc_mensajero mensajero.mensajdoc%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        DELETE FROM mensajero
        WHERE mensajdoc = wdoc_mensajero;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_mensajero(wdoc_mensajero mensajero.mensajdoc%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        DELETE FROM mensajero
        WHERE mensajdoc = wdoc_mensajero;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_producto(wcod_producto producto.producCod%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        UPDATE producto SET producAct=FALSE
        WHERE producCod = wcod_producto;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_tipopago(wid_tipopago tipopago.tipPagId%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        DELETE FROM tipopago
        WHERE tipPagId = wid_tipopago;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_ciudad(wcod_ciudad ciudad.ciudadId%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        DELETE FROM ciudad
        WHERE ciudadId = wcod_ciudad;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_departamento( wcod_departamento	departamento.departId%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        DELETE FROM departamento
        WHERE departId = wcod_departamento;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_delete_proveedor(wnit_proveedor proveedor.proveeNit%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        DELETE FROM proveedor
        WHERE proveeNit = wnit_proveedor;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_cliente(wdoc_cliente cliente.clientDoc%TYPE,wid_ciudad ciudad.ciudadId%TYPE,
											wnom_cliente cliente.clientNom%TYPE,
                                            wdir_cliente cliente.clientDir%TYPE,wtel_cliente cliente.clientTel%TYPE,
											wema_cliente cliente.clientEma%TYPE,
											wcon_cliente cliente.clientCon%TYPE) RETURNS BOOLEAN AS
$BODY$
	DECLARE wcliente cliente.clientDoc%TYPE;
	DECLARE wrol	 cliente.clientRol%TYPE;
    BEGIN
		wrol = 'cliente';
		SELECT clientDoc into wcliente from cliente WHERE clientDoc = wdoc_cliente;
		IF FOUND THEN
			Raise Notice 'El cliente ya se encuentra registrado';
			RETURN false;
		END IF;
        INSERT INTO cliente VALUES(wdoc_cliente,wid_ciudad, wrol, wnom_cliente, wdir_cliente, wtel_cliente,
								wema_cliente, MD5(wcon_cliente));
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_empresa(	wnit_empresa empresatransporte.empreTraNit%TYPE, 
                                                wnom_empresa empresatransporte.empreTraNom%TYPE, 
												wtel_empresa empresatransporte.empreTraTel%TYPE
											 ) RETURNS BOOLEAN AS         
$BODY$
	DECLARE wempresa empresatransporte.empreTraNit%TYPE;
	
    BEGIN
		
		SELECT empreTraNit into wempresa from empresatransporte WHERE empreTraNit = wnit_empresa;
		IF FOUND THEN
			Raise Notice 'La empresa ya se encuentra registrada';
			RETURN false;
		END IF;
        INSERT INTO empresatransporte VALUES(wnit_empresa, wnom_empresa, wtel_empresa);
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_mensajero(wdoc_mensajero mensajero.mensajDoc%TYPE,
											wnom_mensajero mensajero.mensajNom%TYPE,
                                            wdir_mensajero mensajero.mensajDir%TYPE,wtel_mensajero mensajero.mensajTel%TYPE,
											wema_mensajero mensajero.mensajEma%TYPE,
											wcon_mensajero mensajero.mensajCon%TYPE) RETURNS BOOLEAN AS
$BODY$
	DECLARE wmensajero mensajero.mensajDoc%TYPE;
	DECLARE wrol	 mensajero.mensajRol%TYPE;
    BEGIN
		wrol = 'mensajero';
		SELECT mensajDoc into wmensajero from mensajero WHERE mensajDoc = wdoc_mensajero;
		IF FOUND THEN
			Raise Notice 'El Mensajero ya se encuentra registrado';
			RETURN false;
		END IF;
        INSERT INTO mensajero VALUES(wdoc_mensajero, wrol, wnom_mensajero, wdir_mensajero, wtel_mensajero,
								wema_mensajero, MD5(wcon_mensajero));
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_producto(	wcod_producto producto.producCod%TYPE, wnom_producto producto.producNom%TYPE, 
												wsto_producto producto.producSto%TYPE, wpre_producto producto.producPre%TYPE 
											    ) RETURNS BOOLEAN AS
                                                
$BODY$
	DECLARE wproducto producto.producCod%TYPE;
	
    BEGIN
		
		SELECT producCod into wproducto from producto WHERE producCod = wcod_producto;
		IF FOUND THEN
			Raise Notice 'El Producto ya se encuentra registrado';
			RETURN false;
		END IF;
        INSERT INTO producto VALUES(wcod_producto, wnom_producto, wsto_producto, wpre_producto);
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

create or replace function fun_insert_tipopago(wnom_tipopago tipopago.tipPagNom%type) returns varchar as
$$
	declare wid tipopago.tipPagId%type;
	declare wtipopago tipopago.tipPagId%type;
	begin
		select t.tipPagId into wtipopago from tipopago t where t.tipPagNom=wnom_tipopago;
		if found then
			raise notice 'El tipo de pago ya existe';
			return 'Error al insertar';
		end if;
		select max(t.tipPagId) into wid from tipopago t;
		if wid is null then
			wid = 0;
		end if;
		wid = wid + 1;
		insert into tipopago values(wid, wnom_tipopago);
		if found then
			raise notice 'Funciona. El tipo de pago %, % se insertó correctamente', wid, wnom_tipopago;
			return 'Exito';
		else
			raise notice 'Falló la inserción';
			return 'No funcionó';
		end if;
	end;
$$
language plpgsql;

CREATE OR REPLACE FUNCTION fun_insert_ciudad( wnom_ciudad      ciudad.ciudadNom%TYPE, 
											  wid_departamento ciudad.idDepart%TYPE, 
                                              wdom_ciudad      ciudad.precioDom %TYPE) RETURNS BOOLEAN AS                                           
$BODY$
	DECLARE 
		wciudad RECORD;
		wcontador ciudad.ciudadId%TYPE;
    BEGIN
		
		SELECT ciudadNom, idDepart INTO wciudad from ciudad 
		WHERE ciudadNom = wnom_ciudad AND idDepart = wid_departamento;
		IF FOUND THEN
			Raise Notice 'La Ciudad ya se encuentra registrado';
			RETURN false;
		END IF;
		SELECT max(ciudadId) INTO wcontador FROM ciudad;
		IF wcontador IS NULL THEN
			wcontador = 0;
		END IF;
		wcontador = wcontador + 1;
        INSERT INTO ciudad VALUES(wcontador, wid_departamento, wnom_ciudad, wdom_ciudad);
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_departamento( wnom_departamento	departamento.departNom%TYPE) RETURNS BOOLEAN AS                                           
$BODY$
	DECLARE 
		wdepartamento 	departamento.departNom%TYPE;
		wcontador 		departamento.departId%TYPE;
    BEGIN
		
		SELECT departNom INTO wdepartamento from departamento 
		WHERE departNom = wnom_departamento;
		IF FOUND THEN
			Raise Notice 'El Departamento ya se encuentra registrado';
			RETURN false;
		END IF;
		SELECT max(departId) INTO wcontador FROM departamento;
		IF wcontador IS NULL THEN
			wcontador = 0;
		END IF;
		wcontador = wcontador + 1;
        INSERT INTO departamento VALUES(wcontador, wnom_departamento);
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_insert_proveedor(wnit_proveedor proveedor.proveeNit%TYPE,
												wid_ciudad ciudad.ciudadId%TYPE,
												wnom_proveedor proveedor.proveeNom%TYPE,
                                            	wdir_proveedor proveedor.proveeDir%TYPE,
												wtel_proveedor proveedor.proveeTel%TYPE,
												wema_proveedor proveedor.proveeEma%TYPE) RETURNS BOOLEAN AS
$BODY$
	DECLARE wproveedor proveedor.proveeNit%TYPE;
    BEGIN
		SELECT proveeNit into wproveedor from proveedor WHERE proveeNit = wnit_proveedor;
		IF FOUND THEN
			Raise Notice 'El proveedor ya se encuentra registrado';
			RETURN false;
		END IF;
        INSERT INTO proveedor VALUES( 	wnit_proveedor, wid_ciudad, wnom_proveedor, wdir_proveedor, 
										wtel_proveedor, wema_proveedor);
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_cliente(wdoc_cliente cliente.clientDoc%TYPE,
                                            wciu_cliente ciudad.ciudadId%TYPE,
											wnom_cliente cliente.clientNom%TYPE,
                                            wdir_cliente cliente.clientDir%TYPE,wtel_cliente cliente.clientTel%TYPE,
											wema_cliente cliente.clientEma%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        UPDATE cliente SET      clientNom       = wnom_cliente,
								idciudad		= wciu_cliente,
                                clientDir       = wdir_cliente,
                                clientTel       = wtel_cliente,
                                clientema       = wema_cliente
        WHERE clientDoc = wdoc_cliente;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_empresa(  wnit_empresa empresatransporte.empreTraNit%TYPE, 
                                                wnom_empresa empresatransporte.empreTraNom%TYPE, 
												wtel_empresa empresatransporte.empreTraTel%TYPE
											  ) RETURNS BOOLEAN AS      
$BODY$
    BEGIN   
        UPDATE empresatransporte SET    empreTraNit       = wnit_empresa,
                                        empreTraNom       = wnom_empresa,
                                        empreTraTel       = wtel_empresa
        WHERE empreTraNit = wnit_empresa;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_mensajero(wdoc_mensajero mensajero.mensajDoc%TYPE,
											wnom_mensajero mensajero.mensajNom%TYPE,
                                            wdir_mensajero mensajero.mensajDir%TYPE,wtel_mensajero mensajero.mensajTel%TYPE,
											wema_mensajero mensajero.mensajEma%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        UPDATE mensajero SET      mensajNom       = wnom_mensajero,
                                mensajDir       = wdir_mensajero,
                                mensajTel       = wtel_mensajero,
                                mensajema       = wema_mensajero
        WHERE mensajDoc = wdoc_mensajero;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_parametros(wnit_empresa parametros.empreNit%TYPE, wnom_empresa parametros.empreNom%TYPE,
                                            wnumfacini_empresa parametros.numFacIni%TYPE,
											wredpundes_empresa parametros.redPunDes%TYPE,
                                            wredpundom_empresa parametros.redPunDom%TYPE,
											wadmincon_empresa parametros.adminCon%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        
        raise notice 'La contraseña es: %', wadmincon_empresa;

        IF wadmincon_empresa  IS NOT NULL AND wadmincon_empresa != '' THEN
            UPDATE parametros SET empreNom       = wnom_empresa,
								  numFacIni		 = wnumfacini_empresa,
                                  redPunDes      = wredpundes_empresa,
                                  redPunDom      = wredpundom_empresa,
                                  adminCon       = MD5(wadmincon_empresa)
            WHERE empreNit = wnit_empresa;
        ELSE
            UPDATE parametros SET      empreNom       = wnom_empresa,
								numFacIni		= wnumfacini_empresa,
                                redPunDes       = wredpundes_empresa,
                                redPunDom       = wredpundom_empresa
            WHERE empreNit = wnit_empresa;
        END IF;

        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_producto(  wcod_producto producto.producCod%TYPE, wnom_producto producto.producNom%TYPE, 
												 wsto_producto producto.producSto%TYPE, wpre_producto producto.producPre%TYPE 
                                                ) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        UPDATE producto SET     producNom       = wnom_producto,
                                producsto       = wsto_producto,
                                producpre       = wpre_producto
        WHERE producCod = wcod_producto;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_ciudad(  wcod_ciudad      ciudad.ciudadId%TYPE,
                                               wnom_ciudad      ciudad.ciudadNom%TYPE, 
											   wid_departamento ciudad.idDepart%TYPE, 
                                               wdom_ciudad      ciudad.precioDom%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        UPDATE ciudad SET   ciudadNom      = wnom_ciudad,
                            idDepart       = wid_departamento,
                            precioDom      = wdom_ciudad
        WHERE ciudadId = wcod_ciudad;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_departamento( wcod_departamento	departamento.departId%TYPE,
                                                    wnom_departamento	departamento.departNom%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        UPDATE departamento SET departNom   = wnom_departamento
        WHERE departId = wcod_departamento;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION fun_update_proveedor(wnit_proveedor proveedor.proveeNit%TYPE,
												wid_ciudad ciudad.ciudadId%TYPE,
												wnom_proveedor proveedor.proveeNom%TYPE,
                                            	wdir_proveedor proveedor.proveeDir%TYPE,
												wtel_proveedor proveedor.proveeTel%TYPE,
												wema_proveedor proveedor.proveeEma%TYPE) RETURNS BOOLEAN AS
$BODY$
    BEGIN
        UPDATE proveedor SET    proveeNit       = wnit_proveedor,
							    idCiudad		= wid_ciudad,
                                proveeNom       = wnom_proveedor,
                                proveeDir       = wdir_proveedor,
                                proveeTel       = wtel_proveedor,
                                proveeEma       = wema_proveedor
        WHERE proveeNit = wnit_proveedor;
        IF FOUND THEN
            RETURN TRUE;
        ELSE
            RETURN FALSE;
        END IF;
    END;
$BODY$
LANGUAGE PLPGSQL;

-- CREACIÓN DE USUARIO CLIENTE--

CREATE USER cliente WITH PASSWORD 'cliente123';  

GRANT CONNECT ON DATABASE db_amarok TO cliente;  

GRANT USAGE ON SCHEMA public TO cliente;  

GRANT SELECT, INSERT, UPDATE ON TABLE cliente TO cliente; 

GRANT SELECT, INSERT ON TABLE venta, redencionpuntos, detalleventa, enviolocal, envionacional TO cliente;

GRANT SELECT ON TABLE ciudad, departamento, tipopago TO cliente;